name: Deploy GitHub ARC Infra

on:
  workflow_dispatch:
    inputs:
      use_oidc:
        description: 'Use OIDC for azure login?'
        required: true
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: 1.7.5
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    outputs:
      tfplan_path: ${{ steps.plan.outputs.tfplan_path }}
    # env:
    #   ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
    #   ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
    #   ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      #ARM_USE_OIDC: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      # OIDC Azure Login
      - name: 'Login to Azure with OIDC'
        if: ${{ inputs.use_oidc == 'true' }}
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          #allow-no-subscriptions: true

      # Client Secret Azure Login
      - name: 'Login to Azure with Client Secret'
        if: ${{ inputs.use_oidc == 'false' }}
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set ARM_USE_OIDC env
        run: |
          echo "ARM_USE_OIDC=${{ inputs.use_oidc }}" >> $GITHUB_ENV

      - name: Write Terraform Variable File with Secrets
        run: |
          cat > github_app.auto.tfvars <<EOF
          github_app_id            = "${{ secrets.GH_APP_ID }}"
          github_app_installation_id = "${{ secrets.GH_APP_INSTALLATION_ID }}"
          github_app_private_key     = <<EOKEY
          ${{ secrets.GH_APP_PRIVATE_KEY }}
          EOKEY

          EOF

      - name: Terraform Format
        run: terraform fmt -recursive

      - name: Terraform Init
        # env:
        #   ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        #   ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        #   ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        #   ARM_USE_OIDC: true
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan
          echo "tfplan_path=tfplan" >> $GITHUB_OUTPUT
        # run: terraform plan -out=tfplan 

      # Save the tfplan as an artifact for the next job
      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

  terraform-apply:
    name: Terraform Apply 
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: sumvita
    steps:
      - uses: actions/checkout@v4
      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: tfplan

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # OIDC Azure Login
      - name: 'Login to Azure with OIDC'
        if: ${{ inputs.use_oidc == 'true' }}
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          #allow-no-subscriptions: true

      # Client Secret Azure Login
      - name: 'Login to Azure with Client Secret'
        if: ${{ inputs.use_oidc == 'false' }}
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Export Terraform Outputs
        id: tf_outputs
        run: |
          echo "RG_NAME=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
          echo "AKS_NAME=$(terraform output -raw aks_cluster_name)" >> $GITHUB_ENV

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group $RG_NAME --name $AKS_NAME --admin --overwrite-existing

      - name: Wait for ARC CRD
        run: |
          # Wait up to 120 seconds for the CRD to appear
          for i in {1..24}; do
            kubectl get crd autoscalingrunnersets.actions.github.com && exit 0
            echo "Waiting for ARC CRD to be available..."
            sleep 5
          done
          echo "ARC CRD not available after waiting, failing."
          exit 1

      # - name: Sleep after CRD for API sync
      #   run: sleep 30

      # - name: Apply Runner ScaleSet Manifest
      #   run: kubectl apply -f manifests/arc-autoscale-runner.yml
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy ARC Runner ScaleSet with Helm
        run: |
          helm upgrade --install arc-runner-set \
            --namespace arc \
            --create-namespace \
            -f manifests/runner-values.yml \
            oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set
