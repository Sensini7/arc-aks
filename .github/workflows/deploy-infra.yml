name: Deploy GitHub ARC Infra

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_VERSION: 1.7.5

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 'Login to Azure with OIDC'
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          #allow-no-subscriptions: true

      - name: Write Terraform Variable File with Secrets
        run: |
          cat > github_app.auto.tfvars <<EOF
          github_app_id            = "${{ secrets.GH_APP_ID }}"
          github_app_installation_id = "${{ secrets.GH_APP_INSTALLATION_ID }}"
          github_app_private_key     = <<EOKEY
          ${{ secrets.GH_APP_PRIVATE_KEY }}
          EOKEY

          EOF

      - name: Terraform Format
        run: terraform fmt -recursive

      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Export Terraform Outputs
        id: tf_outputs
        run: |
          echo "RG_NAME=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
          echo "AKS_NAME=$(terraform output -raw aks_cluster_name)" >> $GITHUB_ENV

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group $RG_NAME --name $AKS_NAME --admin --overwrite-existing

      - name: Wait for ARC CRD
        run: |
          # Wait up to 120 seconds for the CRD to appear
          for i in {1..24}; do
            kubectl get crd autoscalingrunnersets.actions.github.com && exit 0
            echo "Waiting for ARC CRD to be available..."
            sleep 5
          done
          echo "ARC CRD not available after waiting, failing."
          exit 1

      - name: Sleep after CRD for API sync
        run: sleep 30

      - name: Apply Runner ScaleSet Manifest
        run: kubectl apply -f manifests/arc-autoscale-runner.yml
